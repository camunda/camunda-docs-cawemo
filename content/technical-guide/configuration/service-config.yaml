---
auth:
  token:
    #Optimize uses token-based authentication to keep track of which users are
    #logged in. Define when a token is supposed to expire.
    lifeMin: 15
container:
  # A host name or IP address, to identify a specific network interface on
  # which to listen.
  host: localhost
  ports:
    #A port number that will be used by the embedded jetty server to process
    #HTTP connections.
    http: 8090
    # A port number that will be used by the embedded jetty server to process
    # secure HTTPS connections.
    https: 8091
  #HTTPS requires an SSL Certificate. When you generate an SSL Certificate,
  #you are creating a keystore file and a keystore password for use when the
  #browser interface connects
  keystore:
    location: keystore.jks
    password: optimize
  #configuration of status reporting web socket
  status:
    #max number of threads\sessions that will be kept to report status
    connections:
      max: 10
  checkMetadata: true

# Configuration for engines used to import data. Please note that you have to have at
# least one engine configured at all times.
engines:
  # An alias of the engine, which will be used for internal purposes like
  # logging and displaying which data belong to which engine.
  'camunda-bpm':
    #The name of the engine that will be used to import data.
    name: default
    #A base URL that will be used for connections to the Camunda Engine REST API.
    rest: 'http://localhost:8080/engine-rest'
    authentication:
      #Toggles basic authentication on or off. When enabling basic
      #authentication, please be aware that you also need to adjust the values
      #of the user and password
      enabled: false
      #When basic authentication is enabled, this password is used to
      #authenticate against the engine.
      password: ''
      #When basic authentication is enabled, this user is used to authenticate
      #against the engine.
      user: ''
    # The webapps configuration allows Optimize to directly link
    # to the other Camunda Web Applications, e.g. to jump from
    # Optimize directly to a dedicated process instance in Cockpit
    webapps:
      # Defines the endpoint where to find the camunda webapps for the given engine
      endpoint: 'http://localhost:8080/camunda'
      # Enables/disables linking to other Camunda Web Applications
      enabled: true

engine-commons:
  connection:
    #Maximum time without connection to the engine, Optimize should wait
    #until a time out is triggered. A value of zero means to wait an
    # infinite amount of time.
    timeout: 0
  procdef:
    #The engine endpoint to the process definition.
    resource: '/process-definition'
    #The engine endpoint to the process definition xml.
    xml: '/xml'
  read:
    # Maximum time a request to the engine should last,
    # before a timeout triggers. A value of zero means to wait an
    # infinite amount of time.
    timeout: 0
  user:
    validation:
      #The engine endpoint for the user validation.
      resource: '/identity/verify'

import:
  data:
    activity-instance:
      #Overwrites the maximum page size for historic activity instance
      #fetching.
      maxPageSize: 10000
    process-definition:
      #The name of the process definition type.
      elasticsearchType: process-definition
    process-definition-xml:
      #Overwrites the maximum page size for process definition xml model
      #fetching. Should be a low value, as large models will lead to
      #memory or timeout problems.
      maxPageSize: 2
    process-instance:
      #Overwrites the maximum page size for historic process instance
      #fetching.
      maxPageSize: 10000
      #The name of the process instance type.
      elasticsearchType: process-instance
    variable:
      #Overwrites the maximum page size for historic variable instance
      #fetching.
      maxPageSize: 10000
  # Number of threads being used to process the import jobs that are writing data to elasticsearch.
  elasticsearchJobExecutorThreadCount: 2
  #Adjust the queue size of the import jobs that store data to elasticsearch.
  #A too large value might cause memory problems.
  elasticsearchJobExecutorQueueSize: 100
  handler:
    backoff:
      # Interval which is used for the backoff time calculation.
      interval: 5000
      # Once all pages are consumed, the import service component will
      # start scheduling fetching tasks in increasing periods of time,
      # controlled by 'backoff' counter.
      max: 15
  #The name of the import index type.
  indexType: import-index
  #States how often the import index should be stored to Elasticsearch.
  importIndexStorageIntervalInSec: 10
  writer:
    #Number of retries when there is a version conflict in Elasticsearch
    #during the import.
    numberOfRetries: 5

es:
  analyzer:
    #Defines the name of the analyzer.
    name: case_sensitive
    #Tokenfilter applied to every token.
    tokenfilter: standard
    #Tokenizer used to process tokens within a query.
    tokenizer: whitespace
  connection:
    #Maximum time without connection to Elasticsearch, Optimize should
    #wait until a time out triggers.
    timeout: 10000
  heatmap:
    duration:
      #The name of the duration target value type.
      targetValueType: duration-target-value
  # A hostname on which the Elasticsearch TCP listener is available.
  host: localhost
  # The name of the Elasticsearch cluster Optimize should connect with.
  clusterName: elasticsearch
  ports:
    # A port number used by Elasticsearch to accept TCP connections.
    tcp: 9300
    # A port number used by Elasticsearch to accept HTTP connections.
    http: 9200

  # define a secured connection to be able to communicate
  # with an Elasticsearch instance secured with x-pack
  security:
    # the x-pack username that has the rights to start a transport connection
    username: 'elastic'
    # the x-pack password of the user
    password: 'I-love-optimize'
    ssl:
      # the path to the PEM encoded file containing the private key
      key: '/path/to/client.key'
      # path to a PEM encoded file containing the certificate (or certificate chain)
      # that will be presented to clients when they connect.
      certificate: '/path/to/client.crt'
      # the path to the PEM encoded certificate file that should be trusted.
      # Note: if you are using a public CA that is already trusted by the Java runtime,
      # you do not need to set the certificate_authorities.
      certificate_authorities: '/path/to/ca.crt'
      # controls the verification of certificates. Valid values are none, certificate, and full.
      # See the elasticsearch security setting 'xpack.security.transport.ssl.verification_mode'
      # for more information about the values.
      verification_mode: 'certificate'
      # used to enable or disable TLS/SSL for both the transport and http layer.
      # Also decides if a secured connection is build up at all.
      enabled: false

  #An index name used to create all Camunda Optimize types, shards, etc.
  index: optimize
  licenseType: license
  dashboardType: dashboard
  alertType: alert
  alertStatusType: alert-status
  reportShareType: report-share
  dashboardShareType: dashboard-share
  metaDataType: metadata
  sampler:
    #Connection sampler interval set to the client
    interval: 5000
  #Maximum time a request to elasticsearch should last, before a timeout
  #triggers.
  scrollTimeout: 60000
  settings:
    index:

      # How often should the data replicated in case of node failure.
      # NOTE: this property only applies the first time Optimize is started and
      # the schema/mapping is deployed on Elasticsearch. If you want to take
      # this property to take effect again, you need to delete all indexes (with it all data)
      # and restart Optimize.
      number_of_replicas: 1

      # How many shards should be used in the cluster.
      # NOTE: this property only applies the first time Optimize is started and
      # the schema/mapping is deployed on Elasticsearch. If you want to take
      # this property to take effect again, you need to delete all indexes (with it all data)
      # and restart Optimize.
      number_of_shards: 5
      #How long Elasticsearch waits until the documents are available
      #for search. A positive value defines the duration in seconds.
      #A value of -1 means that a refresh needs to be done manually.
      refresh_interval: 2s
  users:
    #The name of the user type.
    type: users

plugin:
  variableImport:
    #Look in the given base package list for variable import adaption plugins.
    #If empty, the import is not influenced.
    basePackages: []
  engineRestFilter:
    #Look in the given base package list for engine rest filter plugins.
    #If empty, the REST calls are not influenced.
    basePackages: []
  authenticationExtractor:
    # Looks in the given base package list for authentication extractor plugins.
    # If empty, the standard Optimize authentication mechanism is used.
    basePackages: []

serialization:
  # Define a custom date format that should be used for
  # fetching date data from the engine(should be the same as in the engine)
  # Please note that engine prior to 7.8 use yyyy-MM-dd'T'HH:mm:ss as default date format
  engineDateFormat: yyyy-MM-dd'T'HH:mm:ss.SSSZ
  # the date format that is used in Optimize internally
  optimizeDateFormat: yyyy-MM-dd'T'HH:mm:ss.SSSZ

alerting:
  quartz:
    jobStore: 'org.quartz.simpl.RAMJobStore'

email:
  #A switch to control email sending process.
  enabled: false
  # Username of your smtp server
  username: ''
  # Corresponding password to the given user of your smtp server
  password: ''
  # Email address that can be used to send alerts
  address: ''
  # The smtp server name
  hostname: ''
  # The smtp server port. This one is also used as SSL port for the security connection.
  port: 587
  # States how the connection to the server should be secured.
  # Possible values are 'NONE', 'STARTTLS' or 'SSL/TLS'
  securityProtocol: 'NONE'

export:
  csv:
    # Maximum number of records returned by CSV export
    limit: 1000
    # Position of first record which will be exported in CSV
    offset: 0

historyCleanup:
  # switch for the cleanup, defaults to false
  enabled: false
  # cron expression for when the cleanup should run
  cronTrigger: '0 1 * * *'
  # time to live (ttl) for process instance data, from when reached the process instance will get cleaned up
  # Format is ISO_8601 duration  https://en.wikipedia.org/wiki/ISO_8601#Durations
  ttl: 'P2Y'
  # type of cleanup to perform, possible values:
  # 'all' - delete everything related to the process instance
  # 'variables' - only delete associated variables of a process instance
  mode: 'all'
  # process definition specific configuration parameters that will overwrite the general parameters (ttl, cleanupMode)
  # for the specific processDefinition key
  perProcessDefinitionConfig:
  # 'myProcessDefinitionKey':
  #   ttl: 'P2M'
  #    mode: 'variables'
